import { createPublicClient, createWalletClient, http, parseEther } from "viem";
import { privateKeyToAccount } from "viem/accounts";
import { sepolia } from "viem/chains";
import { config } from "dotenv";

// Load environment variables
config();

// Contract ABI and Bytecode
const contractAbi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "telegramId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "SubscriptionPaid",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "telegramId",
        type: "uint256",
      },
    ],
    name: "isSubscriptionActive",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "telegramId",
        type: "uint256",
      },
    ],
    name: "subscribe",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "subscriptions",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newPrice",
        type: "uint256",
      },
    ],
    name: "updatePrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const contractBytecode =
  "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062278d0060025534801561006457600080fd5b506109d4806100746000396000f3fe608060405260043610610072576000357c01000000000000000000000000000000000000000000000000000000009004806315d45f7b1461007757806327e235e3146100a0578063443c84e8146100dd5780638da5cb5b14610106578063a035b1fe14610131578063d0e30db01461015c575b600080fd5b34801561008357600080fd5b5061009e60048036038101906100999190610747565b610166565b005b3480156100ac57600080fd5b506100c760048036038101906100c29190610747565b6101df565b6040516100d49190610783565b60405180910390f35b3480156100e957600080fd5b5061010460048036038101906100ff9190610747565b6101f7565b005b34801561011257600080fd5b5061011b610317565b604051610128919061080d565b60405180910390f35b34801561013d57600080fd5b5061014661033b565b6040516101539190610783565b60405180910390f35b610164610341565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101be57600080fd5b80600260006101000a81548163ffffffffffffffff021916908363ffffffff16021790555050565b60016020528060005260406000208160009054906101000a900460ff1690915050565b600260009054906101000a900463ffffffff1663ffffffff163414156102b757600160008281526020019081526020016000206000905460ff168015610243575042805490600101905590505b80156102b657600180600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507f71a7702a6d1515faa79853bcf824d00ff1f3c2aa7989e39641b5f82830aa66408242604051610303929190610847565b60405180910390a15b5b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b600260009054906101000a900463ffffffff1663ffffffff16341461036357600080fd5b565b600080fd5b6000819050919050565b61037e8161036b565b811461038957600080fd5b50565b60008135905061039b81610375565b92915050565b6000602082840312156103b7576103b6610366565b5b60006103c58482850161038c565b91505092915050565b60008115159050919050565b6103e3816103ce565b82525050565b60006020820190506103fe60008301846103da565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061042f82610404565b9050919050565b61043f81610424565b82525050565b600060208201905061045a6000830184610436565b92915050565b6000819050919050565b61047381610460565b82525050565b600060208201905061048e600083018461046a565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104e282610499565b810181811067ffffffffffffffff82111715610501576105006104aa565b5b80604052505050565b60006105146103a1565b905061052082826104d9565b919050565b600067ffffffffffffffff8211156105405761053f6104aa565b5b61054982610499565b9050602081019050919050565b82818337600083830152505050565b600061057861057384610525565b61050a565b90508281526020810184848401111561059457610593610494565b5b61059f848285610556565b509392505050565b600082601f8301126105bc576105bb61048f565b5b81356105cc848260208601610565565b91505092915050565b600080604083850312156105ec576105eb610366565b5b60006105fa8582860161038c565b925050602083013567ffffffffffffffff81111561061b5761061a61048f565b5b610627858286016105a7565b9150509250929050565b600080600060608486031215610649576106486103a1565b5b600084013567ffffffffffffffff81111561066757610666610494565b5b61067386828701610565565b935050602084013567ffffffffffffffff81111561069457610693610494565b5b6106a086828701610565565b925050604084013567ffffffffffffffff8111156106c1576106c0610494565b5b6106cd86828701610565565b9150509250925092565b600080fd5b600080fd5b600080fd5b60008083601f8401126106fc576106fb6106d7565b5b8235905067ffffffffffffffff811115610719576107186106dc565b5b602083019150836020820283011115610735576107346106e1565b5b9250929050565b60006020828403121561075d5761075c610366565b5b600061076b8482850161038c565b91505092915050565b61077d81610460565b82525050565b60006020820190506107986000830184610774565b92915050565b6107a781610424565b81146107b257600080fd5b50565b6000813590506107c48161079e565b92915050565b6000602082840312156107e0576107df610366565b5b60006107ee848285016107b5565b91505092915050565b6108008161036b565b82525050565b600060208201905061081b60008301846107f7565b92915050565b61082a81610460565b82525050565b61083981610460565b82525050565b60408201600082015161085360008501826107f7565b50602082015161086660208501826107f7565b50505050565b600061087860408301846107f7565b905092915050565b600061088c60408401846107f7565b905092915050565b60006108a060408501846107f7565b905092915050565b60006108b460408601846107f7565b905092915050565b60006108c860408701846107f7565b905092915050565b60006108dc60408801846107f7565b905092915050565b60006108f060408901846107f7565b905092915050565b60006109046040808a016108e3565b905092915050565b60006109186040818b016108cf565b905092915050565b600061092c6040828c016108bb565b905092915050565b60006109406040838d016108a7565b905092915050565b60006109546040848e01610893565b905092915050565b60006109686040858f0161087f565b905092915050565b61097981610460565b811461098457600080fd5b50565b60008135905061099681610970565b92915050565b600060208284031215610990576109916109336109546109756109966108f7";

async function main() {
  if (!process.env.EVM_PRIVATE_KEY) {
    throw new Error("EVM_PRIVATE_KEY is required");
  }

  const privateKey = process.env.EVM_PRIVATE_KEY as `0x${string}`;
  const account = privateKeyToAccount(privateKey);

  // Initialize the public client
  const publicClient = createPublicClient({
    chain: sepolia,
    transport: http(),
  });

  // Initialize the wallet client
  const walletClient = createWalletClient({
    chain: sepolia,
    transport: http(),
    account,
  });

  console.log("Deploying contract from:", account.address);

  try {
    // Deploy the contract
    const hash = await walletClient.deployContract({
      abi: contractAbi,
      bytecode: contractBytecode as `0x${string}`,
      account,
    });

    // Wait for deployment to complete
    const receipt = await publicClient.waitForTransactionReceipt({ hash });

    if (!receipt.contractAddress) {
      throw new Error("Contract deployment failed - no contract address");
    }

    console.log("Contract deployed successfully!");
    console.log("Contract address:", receipt.contractAddress);
    console.log("Transaction hash:", hash);

    // Add a delay before verifying
    console.log("Waiting for block confirmations before verification...");
    await new Promise((resolve) => setTimeout(resolve, 20000));

    console.log("\nAdd this contract address to your .env file:");
    console.log("SUBSCRIPTION_CONTRACT_ADDRESS=" + receipt.contractAddress);
  } catch (error) {
    console.error("Deployment failed:", error);
    process.exit(1);
  }
}

main().catch((error) => {
  console.error(error);
  process.exit(1);
});
